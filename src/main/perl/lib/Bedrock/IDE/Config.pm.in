package Bedrock::IDE::Config;

# Implements a 'singleton' pattern for our configuration

our $IDE_CONFIG;
our $CONFIG;
our $DOCUMENT_ROOT;
our $CONFIG_PATH_ROOT;
our $PORT;
our $PLUGIN_PATH;
our $PID_FILE;
our $INDEX_PAGE;
our $PERL5LIB;
our $TAGX;

use Bedrock::XML;
use File::Copy;
use parent qw/Exporter/;
use vars qw/@EXPORT_OK/;

@EXPORT_OK = qw/$IDE_CONFIG $CONFIG $DOCUMENT_ROOT $CONFIG_PATH_ROOT $PORT $PLUGIN_PATH $INDEX_PAGE $PID_FILE $PERL5LIB $TAGX/;

INIT {
  $IDE_CONFIG = Bedrock::XML->new('@libdir@/bedrock-ide/config/bedrock-ide.xml' );
  $CONFIG = $IDE_CONFIG->{'bedrock-ide'}; # user modifiable configuration
  
  $DOCUMENT_ROOT = $CONFIG->{DOCUMENT_ROOT} || '/var/www/html';
  $CONFIG_PATH_ROOT = $CONFIG->{config_path} || '/var/www';
  $PLUGIN_PATH = $CONFIG->{PLUGIN_PATH};
  $INDEX_PATE = $CONFIG->{INDEX_PAGE};
  
  $PORT = $IDE_CONFIG->{port} || '8080';
  $PID_FILE = $IDE_CONFIG->{pidfile} || '/var/run/bedrock-ide.pid';
  $PERL5LIB = $IDE_CONFIG->{PERL5LIB};
  
  if ( -e "$CONFIG_PATH_ROOT/config/tagx.xml" ) {
    $TAGX = Bedrock::XML->new("$CONFIG_PATH_ROOT/config/tagx.xml");
  }
}

# can only be called as a class method
sub save {
  die "Bedrock::IDE::Config::save() only\n" if $_[0] ne 'Bedrock::IDE::Config';

  $IDE_CONFIG->{'bedrock-ide'} = $CONFIG;

  move('@libdir@/bedrock-ide/config/bedrock-ide.xml', '@libdir@/bedrock-ide/config/bedrock-ide.xml~');

  Bedrock::XML::writeXML($IDE_CONFIG, '@libdir@/bedrock-ide/config/bedrock-ide.xml');
}

sub restore {
  die "Bedrock::IDE::Config::restore() only\n" if $_[0] ne 'Bedrock::IDE::Config';

  if (-e '@libdir@/bedrock-ide/config/bedrock-ide.xml~' ) {
    move('@libdir@/bedrock-ide/config/bedrock-ide.xml~', '@libdir@/bedrock-ide/config/bedrock-ide.xml');
  }
  else {
    die "no restore file\n";
  }
}

1;
