#!/usr/bin/perl

package Bedrock::IDE::Docs;

use strict;
use warnings;

use parent qw/Class::Accessor::Fast/;

Bedrock::IDE::Docs->mk_accessors(qw/css_url plugin_path/);
  
use Bedrock;
use Data::Dumper;
use File::Spec;
use File::Temp qw/tempfile/;
use Pod::Html;
use Scalar::Util qw/reftype/;
use Text::TagX;


=pod

=head1 PUBLIC

C<Bedrock::IDE::Docs>

=head1 SYNOPSIS

 BEGIN {
  use lib '/usr/lib/bedrock/perl5';
 }

 my $docs = Bedrock::IDE::Docs->new;

 print join("\n", $docs->tags);
 my $modules = $docs->get_plugin_listing();
 print join("\n", $modules->{'BLM::Startup::Main'});


=head1 DESCRIPTION

=cut

sub get_modules {
  my $dir = shift;
  my $no_blms = shift;

  my @listing;

  return () unless -d $dir;

  local *POD_DIR;
  opendir POD_DIR, $dir;

  while ( my $file = readdir POD_DIR ) {
    next if ( $file =~ /^\./ );

    next if $no_blms && $file =~/blm/i && grep { /$dir/ } @INC;

    if ( -d $dir . "/" . $file ) {
      push @listing, get_modules( $dir . "/" . $file );
    }
    else {
      push @listing, $dir . "/" . $1 if ( $file =~ /^(.*?)\.pm$/ );
    }
  }

  closedir POD_DIR;

  return @listing;
}

sub get_all_modules {
  my $paths = shift;
  my $public_only = shift;
  my $no_blms = shift;

  my @module_listing;
  my %module_map;

  foreach my $path ( @$paths ) {
    my $dir;
    my $filter;

    if ( ref($path) && reftype($path) eq 'HASH' ) {
      $dir = $path->{dir};
      $filter = $path->{filter};
    }
    else {
      $dir = $path;
    }

    my @modules = get_modules( $dir, $no_blms );

    foreach my $file ( @modules ) {
      
      my $module = $file;
      $module =~s/$dir\///;
      $module =~s/\//::/g;

      $filter = qr/$filter/ 
	if $filter;

      next if $filter && $module !~ $filter;
      
      $module_map{$module} = $file;
    }

    push @module_listing, @modules;
  }
  
  local *POD;

  foreach my $module ( keys %module_map) {
    open POD, "<" . $module_map{$module} . ".pm" or next;
    local $/;

    my $source = <POD>;

    if ( $source =~ /\=(pod|head1)/si ) {
      delete $module_map{$module}
	unless ($source =~ /\=head1\s+public/si || ! $public_only );
    }
    else {
      delete $module_map{$module};
    }

    close POD;
  }

  return \%module_map;
}

=pod

=head2 get_plugin_listing

 get_plugin_listing()

Returns a hash reference of modules (keys) and files (values).

=cut

sub get_plugin_listing {
  my $self = shift;
  
  my $modules = get_all_modules( [ $self->plugin_path . '/BLM'], 1);

  foreach (keys %$modules ) {
    my $v = delete $modules->{$_};
    $modules->{"BLM::$_"} = $v;
  }

  return $modules;
}

=pod

=head2 tags

 tags()

Returns an array reference listing all of the Bedrock tags.

=cut

sub tags {
  $Text::TagX::Opentag_expr =~ /^\^\((.*?)\)/;
  
  my @tag_listing = split /\|/, $1;
  @tag_listing = map { !/(\#|else|else\?if|blm|\?)/ ? $_ : ()  } sort @tag_listing;

  return \@tag_listing;
}

sub find_tag_file {
  my $self = shift;
  my $tag = shift;
  
  my $perl5lib = '@bedrockdir@/lib/bedrock/perl5/Bedrock';
  my $tag_file;
  
  foreach ( "NoBody", "WithBody", "WithBody/Loop" ) {
    last if $tag_file;
    my $dir = sprintf( "%s/Text/TagX/TAG/%s", $perl5lib, $_ );
    
    opendir TAGS, $dir || "could not open $dir for reading";
    
    while ( my $file = readdir TAGS ) {
      next unless $file =~ /^$tag\.pm$/i;
      $tag_file = $dir . "/" . $file if ( -s $dir . "/" . $file );
	last;
    }
    closedir TAGS;
  }
  
  return $tag_file;
}

=pod

=head2 pod

 pod( file, [keep-header] )

Returns the HTML version of the pod for the given file.  Unless
C<keep-header> is defined only the body of the html is returned
(without <body> tags).

=cut

sub pod {
  my $self = shift;
  my $file = shift;
  my $keep_header = shift;

  my (undef, $outfile) = tempfile();
  
  my %options = (
		 '--infile'   => $file,
		 '--outfile'  => $outfile,
		 '--cachedir' => File::Spec->tmpdir(),
		 '--css'      => $self->css_url()
		);

  &pod2html(%options);

  my $data;

  if ( -s "$outfile" > 600 ) {
    open( FILE, "$outfile" ) or die "Unable to open $outfile: $!\n";
    local $/ = undef;
    $data = <FILE>;
    close FILE;
  }

  unless ( defined $keep_header ) {
    if ( $data =~ /<body>(.*?)<\/body>/s ) {
      $data = $1;
    }
  }
  
  return $data;
}

1;
